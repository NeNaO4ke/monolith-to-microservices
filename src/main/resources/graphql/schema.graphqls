type Query {
    getGlobalFeed: [PostNUser]
    getAllPosts: [Post]
    getPostWithUser(postId: String!): PostNUser
    getAllPostsByAuthorId(authorId: String!): [Post]
    getCommentsToPost(postId: String!): [PostNUser]
    likeOrDislikePost(postId: String!): Post
    getMyProfile: User
    getUserById(id: String!): User
    getTopPostsWithUsers: [PostNUser]
}

type Mutation {
    likeOrDislikePost(postId: String!): Post
}

#scalar Date

type Subscription {
    postCreated: PostNUser
    personalSubscription: Event
}

type Event {
    eventType: String
    body: EventBody
}

union EventBody = PostNUser | PostLike

type Post {
    id: ID
    text: String
    likesCount: Int
    commentsCount: Int
    likes: [PostLike]
    commentIds: [String]
    isCommentTo: String
    fileLocations: [String]
    authorId: String
    metaDto: MetaDto
    date: String
}

type PostNUser {
    user: User
    post: Post
}



type PostLike {
    userId: ID
    creationTime: String
}

type MetaDto {
    url: String
    title: String
    description: String
    cover: String
}

type User {
    id: ID
    username: String
    password: String
    avatar: String
    description: String
    roles: [String]
}




